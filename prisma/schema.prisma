generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole       @default(MEMBER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  isActive      Boolean        @default(true)
  accounts      Account[]
  church        Church?        @relation("ChurchProfile")
  events        Event[]        @relation("CreatedEvents")
  products      Product[]      @relation("CreatedProducts")
  sales         Sale[]         @relation("UserSales")
  sessions      Session[]
  configs       SystemConfig[] @relation("UserConfigs")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id         String    @id @default(cuid())
  nome       String
  local      String
  data       DateTime
  hora       String
  capacidade Int
  descricao  String?
  status     String    @default("ATIVO")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  creatorId  String
  creator    User      @relation("CreatedEvents", fields: [creatorId], references: [id])
  products   Product[] @relation("EventProducts")
  sales      Sale[]    @relation("EventSales")
}

model Product {
  id         String         @id @default(cuid())
  nome       String
  preco      Float
  descricao  String?
  categoria  String?
  disponivel Boolean        @default(true)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  creatorId  String
  eventId    String
  creator    User           @relation("CreatedProducts", fields: [creatorId], references: [id])
  event      Event          @relation("EventProducts", fields: [eventId], references: [id], onDelete: Cascade)
  images     ProductImage[]
  saleItems  SaleItem[]
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  principal Boolean  @default(false)
  createdAt DateTime @default(now())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Sale {
  id              String     @id @default(cuid())
  total           Float
  status          SaleStatus @default(PENDENTE)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  eventId         String?
  userId          String?
  cliente         String
  dataFinalizacao DateTime?
  email           String?
  formaPagamento  String?
  origem          String?
  telefone        String?
  tipo            String
  event           Event?     @relation("EventSales", fields: [eventId], references: [id])
  user            User?      @relation("UserSales", fields: [userId], references: [id])
  items           SaleItem[]
}

model SaleItem {
  id            String   @id @default(cuid())
  quantidade    Int
  precoUnitario Float
  total         Float?
  saleId        String
  productId     String?
  nome          String
  product       Product? @relation(fields: [productId], references: [id])
  sale          Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String?
  user        User?    @relation("UserConfigs", fields: [userId], references: [id])

  @@unique([userId, key])
}

model Church {
  id          String   @id @default(cuid())
  name        String
  address     String
  city        String
  state       String
  phone       String?
  description String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @unique
  user        User     @relation("ChurchProfile", fields: [userId], references: [id])
}

enum UserRole {
  MEMBER
  ADMIN
  SUPER_ADMIN
}

enum SaleStatus {
  PENDENTE
  FINALIZADA
  CANCELADA
}

#!/usr/bin/env node

/**
 * Script de Diagn√≥stico para Ecclesia Food
 * 
 * Este script verifica a configura√ß√£o do ambiente e identifica poss√≠veis problemas.
 * Para executar: node scripts/diagnostico.mjs
 */

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';
import dotenv from 'dotenv';
import os from 'os';

// Carregar vari√°veis de ambiente
dotenv.config();
console.log('üîç Iniciando diagn√≥stico do ambiente Ecclesia Food...\n');

// Verificar Node.js
try {
  const nodeVersion = process.version;
  console.log(`‚úÖ Node.js: ${nodeVersion}`);
} catch (error) {
  console.error('‚ùå Erro ao verificar vers√£o do Node.js:', error.message);
}

// Verificar NPM
try {
  const npmVersion = execSync('npm -v').toString().trim();
  console.log(`‚úÖ NPM: ${npmVersion}`);
} catch (error) {
  console.error('‚ùå Erro ao verificar vers√£o do NPM:', error.message);
}

// Verificar Next.js
try {
  const packageJson = JSON.parse(fs.readFileSync(path.resolve('./package.json'), 'utf8'));
  const nextVersion = packageJson.dependencies.next;
  console.log(`‚úÖ Next.js: ${nextVersion}`);
} catch (error) {
  console.error('‚ùå Erro ao verificar vers√£o do Next.js:', error.message);
}

// Verificar vari√°veis de ambiente
console.log('\nüìã Verificando vari√°veis de ambiente:');

// DATABASE_URL
if (process.env.DATABASE_URL) {
  console.log('‚úÖ DATABASE_URL: Configurada');
  
  // Verificar formato da string de conex√£o
  const dbUrlPattern = /^(postgres|postgresql):\/\/.+:.+@.+:\d+\/.+(\?.*)?$/;
  if (dbUrlPattern.test(process.env.DATABASE_URL)) {
    console.log('   ‚îî‚îÄ O formato parece v√°lido');
  } else {
    console.log('   ‚îî‚îÄ ‚ö†Ô∏è Aviso: O formato da URL pode estar incorreto');
  }
} else {
  console.error('‚ùå DATABASE_URL: N√£o configurada');
}

// NEXTAUTH_SECRET
if (process.env.NEXTAUTH_SECRET) {
  console.log('‚úÖ NEXTAUTH_SECRET: Configurada');
  
  if (process.env.NEXTAUTH_SECRET.length < 10) {
    console.log('   ‚îî‚îÄ ‚ö†Ô∏è Aviso: A secret parece muito curta (recomendamos pelo menos 32 caracteres)');
  }
} else {
  console.error('‚ùå NEXTAUTH_SECRET: N√£o configurada');
}

// NEXTAUTH_URL
if (process.env.NEXTAUTH_URL) {
  console.log('‚úÖ NEXTAUTH_URL: Configurada');
  
  try {
    new URL(process.env.NEXTAUTH_URL);
    console.log('   ‚îî‚îÄ URL v√°lida');
  } catch {
    console.log('   ‚îî‚îÄ ‚ö†Ô∏è Aviso: A URL parece inv√°lida');
  }
} else {
  console.error('‚ùå NEXTAUTH_URL: N√£o configurada');
}

// Verificar se .env existe
console.log('\nüìã Verificando arquivos de configura√ß√£o:');
if (fs.existsSync(path.resolve('./.env'))) {
  console.log('‚úÖ Arquivo .env: Encontrado');
} else {
  console.error('‚ùå Arquivo .env: N√£o encontrado');
}

// Verificar se .env.local existe
if (fs.existsSync(path.resolve('./.env.local'))) {
  console.log('‚úÖ Arquivo .env.local: Encontrado');
} else {
  console.log('‚ÑπÔ∏è Arquivo .env.local: N√£o encontrado (mas n√£o √© obrigat√≥rio)');
}

// Verificar pasta node_modules
if (fs.existsSync(path.resolve('./node_modules'))) {
  console.log('‚úÖ node_modules: Encontrado');
} else {
  console.error('‚ùå node_modules: N√£o encontrado. Execute "npm install"');
}

// Verificar se o Prisma Client est√° gerado
if (fs.existsSync(path.resolve('./node_modules/.prisma'))) {
  console.log('‚úÖ Prisma Client: Gerado');
} else {
  console.error('‚ùå Prisma Client: N√£o gerado. Execute "npx prisma generate"');
}

// Verificar sistema operacional
console.log('\nüìã Informa√ß√µes do sistema:');
console.log(`‚úÖ Sistema Operacional: ${os.type()} ${os.release()}`);
console.log(`‚úÖ Arquitetura: ${os.arch()}`);
console.log(`‚úÖ Mem√≥ria total: ${Math.round(os.totalmem() / 1024 / 1024 / 1024)} GB`);
console.log(`‚úÖ Mem√≥ria livre: ${Math.round(os.freemem() / 1024 / 1024 / 1024)} GB`);

// Verificar conectividade com o banco de dados (sem expor credenciais)
console.log('\nüìã Tentando conectar ao banco de dados:');
try {
  // N√£o incluiremos c√≥digo real de conex√£o para evitar depend√™ncias adicionais
  console.log('‚ÑπÔ∏è Teste de conex√£o com o banco de dados n√£o implementado neste script');
  console.log('   ‚îî‚îÄ Para testar a conex√£o com o banco de dados, execute: npx prisma db pull');
} catch (error) {
  console.error('‚ùå Erro ao conectar com o banco de dados');
}

console.log('\n‚úÖ Diagn√≥stico conclu√≠do!');
console.log('\nSe voc√™ encontrou problemas, consulte a documenta√ß√£o em:');
console.log('https://github.com/seu-usuario/ecclesia-food#troubleshooting');
console.log('\nOu consulte o arquivo DEPLOY.md para instru√ß√µes de deploy.'); 